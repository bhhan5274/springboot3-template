import java.time.Duration

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "com.avast.gradle:gradle-docker-compose-plugin:$dockerComposePluginVersion"
    }
}

apply plugin: 'docker-compose'

subprojects {
    apply plugin: "java"
    sourceCompatibility = 17
    targetCompatibility = 17

    repositories {
        mavenCentral()
        mavenLocal()

        dependencies {
            implementation "org.mapstruct:mapstruct:$mapStructVersion"
            annotationProcessor "org.mapstruct:mapstruct-processor:$mapStructVersion"
            implementation "org.projectlombok:lombok-mapstruct-binding:0.2.0"
            annotationProcessor "org.projectlombok:lombok-mapstruct-binding:0.2.0"

            compileOnly "org.projectlombok:lombok:$lombokVersion"
            annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        }
    }

    test {
        useJUnitPlatform()
    }
}

dockerCompose {
    useComposeFiles = ['docker-compose.yml']
    removeOrphans = true
    retainContainersOnStartupFailure = true
    dockerComposeStopTimeout = Duration.ofSeconds(1)

    infra {
        projectName = null
        useComposeFiles = ["docker-compose.yml"]
        startedServices = ["mysql"]
    }

    application {
        projectName = null
        useComposeFiles = ["docker-compose.yml"]
        startedServices = []
    }
}

subprojects.each {
    applicationComposeUp.dependsOn(":" + it.name + ":assemble")
}

applicationComposeUp.dependsOn(infraComposeUp)
applicationComposeDown.dependsOn(infraComposeDown)

task buildAndStartServices(type: GradleBuild) {
    tasks = ["applicationComposeUp"]
}

task stopServices(type: GradleBuild) {
    tasks = ["applicationComposeDown", "removeNoneImage"]
}

task removeNoneImage(type: Exec) {
    commandLine 'sh', '-c', './remove_none_image.sh'
}
